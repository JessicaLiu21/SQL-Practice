/*175. Write a SQL query for a report that provides the following information for each person in the Person table, regardless if there is an address for each of those people:
*/
--remember to distinguish when to use LEFT JOIN and when to use FULL JOIN 
SELECT P.FirstName, P.LastName, A.City, A.State 
FROM Person P left JOIN Address A
ON P.PersonId=A.PersonId
/*176.Write a SQL query to get the second highest salary from the Employee table
*/
--method 1
SELECT Max(Salary)  AS SecondHighestSalary
FROM Employee 
WHERE Salary 
NOT IN (SELECT Max(Salary) FROM Employee)
--method 2 
SELECT Max(Salary)  AS SecondHighestSalary
FROM Employee 
WHERE Salary<(SELECT Max(Salary) FROM Employee)
--method3
SELECT TOP 1 Salary  AS SecondHighestSalary
FROM (
SELECT *,RANK() OVER (ORDER BY Salary) AS Rank FROM Employee
) S where rank<>1
/*177 
*/
CREATE FUNCTION getNthHighestSalary(@N INT) RETURNS INT AS
BEGIN
RETURN (
SELECT TOP 1 A.salary
FROM
(
SELECT DENSE_RANK() OVER(ORDER BY Salary DESC) as rank, salary
FROM Employee
)A
WHERE A.rank = @N
);
END

/* leetcode 178* figure out the difference between rank and dense_rank*/
SELECT Score,
DENSE_RANK() Over(Order by Score DESC) AS Rank
FROM Scores

/* Leetcode180--Write a SQL query to find all numbers that appear at least three times consecutively. */
/* Use Windows Function*/
SELECT DISTINCT NUM AS ConsecutiveNums
FROM 
(SELECT id,num,
lag(num) OVER (ORDER BY Id) AS Before,
lead(num) OVER (ORDER BY Id) AS After
FROM logs) Nlogs
WHERE Num=Before AND Before=After

/*leetcode 181 Given the Employee table, write a SQL query that finds out employees who earn more than their managers. 
For the above table, Joe is the only employee who earns more than his manager.
*/
SELECT E1.Name AS Employee
FROM Employee E1
JOIN Employee E2
ON E1.ManagerId=E2.Id
WHERE E1.Salary>E2.Salary
--when join to tables, especailly self-join, think clearly who they join and filter the conditions

/*leetcode 182 Write a SQL query to find all duplicate emails in a table named Person.*/
SELECT P1.Email 
FROM Person P1
GROUP BY P1.Email 
HAVING COUNT(P1.Id)>1
--duplicate problem

/*leetcode 183 Suppose that a website contains two tables, the Customers table and the Orders table. Write a SQL query to find all customers who never order anything.*/
SELECT C.Name AS Customers
FROM Customers AS C 
LEFT JOIN Orders AS O 
ON C.Id=O.CustomerId
WHERE O.CustomerId IS NULL

/*leetcode 184*/
--method1 but not accept in leetcode
SELECT D.Name AS Department,E.Name AS Employee,E.Salary AS Salary
FROM Employee E
JOIN Department D 
ON E.DepartmentId=D.Id 
GROUP BY D.Name,E.Name,E.Salary
HAVING E.Salary in 
(SELECT MAX(Salary) FROM Employee Group by DepartmentId)
--method 2, accept by leetcode
SELECT A.Department,A.Employee,A.Salary
FROM 
(SELECT D.Name AS Department, E.Name AS Employee, E.Salary AS Salary,
DENSE_RANK()Over(Partition by  E.DepartmentID ORDER BY E.Salary DESC) AS RANK
FROM Employee E
JOIN Department D 
ON E.DepartmentId=D.Id ) AS A
WHERE A.RANK=1

/*leetcode 185 Write a SQL query to find employees who earn the top three salaries in each of the department. For the above tables, your SQL query should return the following rows. */
SELECT A.Department,A.Employee,A.Salary
FROM 
(SELECT D.Name AS Department, E.Name AS Employee, E.Salary AS Salary,
DENSE_RANK()Over(Partition by  E.DepartmentID ORDER BY E.Salary DESC) AS RANK
FROM Employee E
JOIN Department D 
ON E.DepartmentId=D.Id ) AS A
WHERE A.RANK<4

/*leetcode 196 Write a SQL query to delete all duplicate email entries in a table named Person,
keeping only unique emails based on its smallest Id.*/
# Write your MySQL query statement below
delete 
from person 
where Id not in 
(select A.mid from (select min(id) as mid from person group by email ) A)
--derived tables must have alias 


/*LEETCODE 197 Given a Weather table, write a SQL query to find all dates' Ids with higher temperature compared to its previous (yesterday's) dates.*/
SELECT DISTINCT W1.Id
FROM Weather W1
JOIN Weather W2 
 ON W1.ReCordDate=DATEADD(DAY,1,W2.RecordDate)
WHERE W1.Temperature>W2.Temperature 
--when making self-join, make clear abou the condtions you want to join/ not to join all the same values 
















